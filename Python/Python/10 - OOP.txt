Criando Objetos


class nomeObjeto:
  def __init__(self, parametros...)
    self.parametros = valor
    self.parametros = valor
    self.parametros = valor


Ex:  obj1 = nomeObjeto(parametros)



Construtores
  __init__

Destrutores
  __del__



class nomeObjeto:
  def __del__(self)
    self.parametros = valor

---------------------------------------------------------------------------------------------------

Herança


class A:
  pass

class B(A):
  pass


super()  -  chamndo o construtor pai

---------------------------------------------------------------------------------------------------

Encapsulamento


publico: pode ser acessado de fora da classe

privado: só pode ser acessado pela classe


Qual convenção utilizamos para definir que o atributo e/ou método é privado?
  Iniciando o nome com underline
    expemplo: _idade, _cadastrarUsuario()

---------------------------------------------------------------------------------------------------

Polimorfismo

---------------------------------------------------------------------------------------------------

Variáveis de classe 
  São variáveis que são compartilhadas por todas as instâncias da classe. Elas são definidas fora de qualquer método da classe, e são acessadas usando o nome da classe. Uma mudança na variável de classe afetará todas as instâncias da classe.

class Exemplo:
  variavel_de_classe = 0

  def __init__(self, valor):
    self.valor = valor
    Exemplo.variavel_de_classe += 1


Variáveis de instância
  São variáveis que pertencem a uma instância específica da classe. Elas são definidas dentro do método __init__ da classe, e são acessadas usando o prefixo self. Cada instância da classe tem sua própria cópia da variável de instância. 

class Pessoa:
  def __init__(self, nome, idade):
    self.nome = nome
    self.idade = idade


Em resumo, variáveis de classe são compartilhadas por todas as instâncias de uma classe, enquanto variáveis de instância pertencem a uma instância específica da classe.

---------------------------------------------------------------------------------------------------

Métodos de classe
  São métodos que operam na classe em si, em vez de operar em uma instância da classe. Esses métodos são definidos com o decorador @classmethod e recebem a classe como seu primeiro argumento, geralmente chamado de cls.

class Exemplo:
  variavel_de_classe = 0

  @classmethod
  def metodo_de_classe(cls):
    print("Esta é a classe", cls)


Métodos estáticos
  São métodos que não têm acesso a instância da classe ou à classe em si. Eles são definidos com o decorador @staticmethod. Eles são úteis para operações que não precisam de acesso aos atributos da classe ou da instância, mas ainda precisam ser definidos na classe por motivos organizacionais ou de design.

class Exemplo:
  @staticmethod
  def metodo_estatico():
    print("Este é um método estático")


Em resumo, métodos de classe operam na classe como um todo e recebem a classe como seu primeiro argumento, enquanto métodos estáticos são métodos que não têm acesso à classe ou à instância e são definidos na classe por motivos organizacionais ou de design.

---------------------------------------------------------------------------------------------------

Classe Abstrata
  É uma classe que não pode ser instanciada, mas pode ser usada como base para outras classes. Uma classe abstrata pode ter métodos abstratos, que são métodos que não têm implementação e devem ser implementados pelas classes que herdam da classe abstrata.
  Assim, podemos definir uma "interface" em Python como uma classe abstrata que define métodos abstratos que outras classes devem implementar para cumprir a interface.


EX:
from abc import ABC, abstractmethod   -    módulo que fornece a base para definir as classes abstratas

class Interface(ABC):
  @abstractmethod
  def metodo_abstrato(self):
    pass
