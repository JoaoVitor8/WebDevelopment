O que é ReactJS?
   Uma biblioteca JavaScript que tem o objetivo de criação de interfaces.

Porque ReactJS é uma biblioteca e não um framework?
   Porque ele não tem uma opinião forte, ele não tem uma estrutura de pastas e regras que os frameworks em si tem. Ele te dá mais liberdade para criar as interfaces da maneira que preferir.


Criando o primeiro projeto com o Vite
   npm create vite@latest reactapp --template react

   Após rodar o comando acima, será exibido a tela para escolher o framework que deseja utilizar.
      Select a framawork:
         react
      Select a variant:
         react


Executando projeto
   npm install
   Após a instalação das dependências, execute o comando abaixo:
      npm run dev


JSX
   É uma extensão do JavaScript bem semelhante ao HTML. Basicamente ele é uma sintaxe que o ReactJS utiliza para que possamos criar as nossas interfaces de forma declarativa.
   O JSX utiliza funções dentro dos arquivos e o retorno dessas funções retornam tags HTML.


Estrutura Pastas e Arquivos
   node_modules - A pasta onde ficam todas dependências e módulos do nosso projeto.

   src - Pasta principal onde ficará todos os nossos arquivos.
   App.css - Arquivo de estilização do App.jsx - Página inicial do nosso projeto que será exibida no navegador.
   favicon.svg - Ícone de favorito da página. index.css - Arquivo de estilização global logo.svg - Arquivo de imagem da logo do ReactJS. main.jsx - Arquivo responsável por inicializar nossa aplicação.
   index.html - Arquivo HTML onde será injetado todo o JavaScript que for compilado para ser exibido no navegador.

   .gitignore - Esse arquivo descreve quais arquivos e pasta não devem subir para o Github. package.json - Arquivo responsável pelas dependências do nosso projeto. Contém informações do pacote, como: scripts, dependências, número de versão e etc...
   package-lock.json - Parecido com o package.json, esse arquivo descreve as características das dependências do projeto como versão, integridade dos links e muito mais.

   vite.config.js - Arquivo de configuração do Vite.


Fragment
   Um padrão comum no React é que um componente pode retornar múltiplos elementos. Os Fragmentos (Fragment) permitem agrupar uma lista de filhos sem adicionar nós extras ao DOM.


Importando arquivos no CSS
   A importação de um arquivo global deverá ser realizada no arquivo main.jsx


Componentes
   Componente nada mais do que um bloco de código reutilizável e independente


Propriedades
   As propriedades dentro de um componente faz com que você possa passar valores diferentes para cada um deles.


Estado
   O Hook useState permite ter variáveis em componentes funcionais. Você passa o estado inicial para esta função e ele retorna uma variável com o valor atual do estado (não necessariamente o estado inicial).


Imutabilidade
   O conteúdo da variável não deve ser modificado e sim substituído.


KeyProp
   Em uma listagem, normalmente utilizamos o map() do JavaScript para trazer todos os dados dessa lista. No React, precisamos passar uma propriedade key para que esse dado nunca se repita e evitar que erros desse tipo aconteçam.


Hooks
   São funções que permitem conectar os recursos de estados e ciclos de vida do React a partir de componentes funcionais. Normalmente os Hooks iniciam com a palavra use por convenção. Exemplos de hooks: useState, useEffect.


useEffect
   O useEffect é executado automaticamente sempre que o componente é renderizado.
