Historia:

JavaScript = Client x Server (Principalmente para o lado do cliente)

Qual a diferença entre um cliente e um servidor para a internet?:
   Um servidor é um host que está executando um ou mais serviços ou programas que compartilham recursos com os clientes. Um cliente não compartilha qualquer de seus recursos, mas solicita um conteúdo ou função do servidor. Os clientes iniciam sessões de comunicação com os servidores que aguardam requisições de entrada.


HTML = Conteudo;
CSS = Estilo;
JavaScript = Interatividade;


Empresa que criou o javascript?:
   O JavaScript foi criado na década de 90 por Brendan Eich a serviço da Netscape.


Java e JavaScript são linguagens de programação diferentes por mais que os nomes sejam iguais, o nome JavaScript só é assim por conta de Marketing. Queriam aproveitar a fama que a linguagem Java estava tendo no momento.


O quê ECMAScript tem a ver com JavaScript?
   ECMAScript é a versão padronizada de JavaScript
   ECMAscript é a linguagem, e javascript é um dialeto, ou seja, a mesma coisa. 
   Cada navegador implementa o javascript de uma maneira diferente e o papel do ecmascript e padronizar essas implementacoes, para que voce nao precise como antigamente escrever um codigo para alguns navegadores e outro codigo para o internet explorer por exemplo.

---------------------------------------------------------------------------------------------------

DOM

por Marca = getElementsByTagName("div")
por ID = getElementById("id")
por Nome = getElementsbyByNome()
por Classe = getElementByClasseName("classe")
por Seletor =

---------------------------------------------------------------------------------------------------

Tipos de dados:                           typeof = Conferir qual é o Tipo Primitivo de uma Variavel

String
   Cadeia de caracteres (Texto)
      Aspas duplas
      Aspas simples


Number
   Números
      Inteiros
      Reaid / Float
      Not a Number
      Infinity


Boolean
   Somente 2 valores
      true
      false


undefined
   indefinido


null
   nulo
   objeto que não possui nada dentro
   diferente de indefinito


Object
   Objeto
   Propriedade / Atributos
   Funcionalidade / Métodos
  EX:   const pessoa = {nome: "João", idade: 20, peso: 50}
   JSON
      stringify  -  transforma o objeto tudo para texto  string
      parce  -  tranforma em objeto

Array
   Agrupamento de dados
  EX:   const pessoas = ['João', 'Flavia', 'Mateus']

---------------------------------------------------------------------------------------------------

Operadores:

Aritméticos
   +   Adição 
   -   Subtração
   *   Multiplicação
   /   Divição
   %   Resto
   **   Potencia


Atribuição
     =
    +=
    -=
    *=
    /=
   **=
    %=


Relacionais
   >     Maior
   <     Menor
   >=    Maior ou igual
   <=    Menor ou igual
   ==    Igual
   !=    Diferente
   ===   Estritamente igual
            Irá ver além dos valores os tipos de elementos
   !==   Estritamente diferente


New
   A expressão new, também denominada como left-hand-side expression, serve para criar um novo objeto usando as funções construtoras que temos por padrão no JavaScript.


Lógicos; Ordem - !, &&, ||
   !   Negação                "não"  Inverte o valor de  True  para  False  ou vice-versa
   &&   Conjunção             "e"    Considera que todos os valores sejam  True
   ||   Disjunção             "ou"   Considera que qualquer valor seja True


Unarios
   typeof
      Serve para saber o tipo de dado que temos na expressão
   delete
      Deleta alguma propriedade de um objeto, desde que ela exista.


Ternário
   condição ? true : false
   condição então valor 1 se não valor 2


Ordem
   (),   ! ++ --,   * /,   + -,   < <= > >=,   == != === !==,   &&,   ||,   ?:,   = += -= *= %=

---------------------------------------------------------------------------------------------------

Operadores Bit à Bit:

Conjução   &
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 & 12

   Depois que fizer a conversão você faz a regra da Conjução

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 0 1 0 0 0  = 8


Disjunção   |
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 | 12

   Depois que fizer a conversão você faz a regra da Disjução

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 1 1 1 0  = 30


Disjunção Esclusiva ^
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 ^ 12

   Depois que fizer a conversão você faz a regra da Disjução Esclusiva

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 0 1 1 0  = 8


Negação ~
   Fazer potencias de 2 até dar uma resultado mais proximo do número que você estiver fazendo a inversão
      Ex: n° ~12      128 64 32 16  8 4 2 1
                        0  0  0  0  1 1 0 0   =  +12
                        1  1  1  1  0 0 1 1   =  -13

   Apos fazer a converção, inverter todos os numeros, os 0 serão 1 e os 1 serão 0, e somar mais 1
   Um atalho é que quando for inverter um numero de positivo para negativo é só somar mais 1 e trocar o sinal
   E de negativo para positivo tira 1 e troca o sinal


Right Shift >>
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, da direita para a esquerda, você tira a quantidade do 2° numero
     Ex: n°  22 >> 2

                 16 8 4 2 1
             22 = 1 0 1 1 0
      resultado = 1 0 1 1 0  menos 2 casas = 1 0 1

                      4 2 1
                      1 0 1  = 4 + 1 = 5


Left Shift <<
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, você aduciona a quantidade do 2° numero
     Ex: n°  22 << 2

                 16 8 4 2 1
             22 = 1 0 1 1 0
      resultado = 1 0 1 1 0  mais 2 casas = 1 0 1 1 0 0 0

           64 32 16 8 4 2 1
            1  0  1 1 0 0 0  = 64 + 16 + 8 = 88

---------------------------------------------------------------------------------------------------

Controle:

if/else
	if (Condição) {
	   true
	}else {
	   false
	}


Switch/case - swith(parametro da função / variavel) {
                 case 1:
                    return "alguma coisa";
                    break
                 case 2:
                    return "alguma coisa";
                    break
                 case 3:
                    return "alguma coisa";
                    break
                 default:
                    return "alguma coisa"
                    break
              }


Throw ?????

try/catch
   tratamento de erro

   try{tenta executa}
   catch{error}
   finally{executa sempre}

---------------------------------------------------------------------------------------------------

Repetição

for   -   of(?)   -   in(?)
   Usar quando eu sei a hora de parar

while
   Usar quando eu não sei a hora de parar

---------------------------------------------------------------------------------------------------

Biblioteca Math

-------------------------------------------------

Biblioteca Date
let data = new Date()  -   Pegar a data / Horario

-------------------------------------------------

localStorage e sessionStorage:   Salvar dados no navegador

localStorage
   Quandos os dados são importantes

   NORMAL
   localStorage.serItem("chave", dado)     salvar
   localStorage.getItem("chave", dado)     resgatar
   localStorage.removeItem("chave", dado)  remover

   OBJETO
   localStorage.setItem("chave", JSON.stringigy(objeto))  salvar de objeto para JSON
   const obetoTOstring = localStorage.getItem("nome")     pegar o JSON
   const objeto = JSON.parse(obetoTOstring)               de JSON para objeto
   console.log(objeto.dado)                               usar o objeto

sessionStorage
   Quandos os dados não são importantes
   

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

Sincrono X Assincrono:


Sistema Síncrono
   Um sistema síncrono (synchronous) é uma tarefa que é concluída após a outra.
   Por padrão, o JavaScript é um sistema síncrono

Sistema Assíncrono
   Num sistema assíncrono (asynchronous) as tarefas são executadas de maneira independente uma da outra.
   O JavaScript poderá usar o assincronismo ao seu favor

---------------------------------------------------------------------------------------------------

Callback
   Callback (chamar de volta) é uma função que é passada como argumento de outra função e depois de algum tempo ela é chamada de volta.

---------------------------------------------------------------------------------------------------

setTimeout
   setTimeout() é uma função que recebe como argumento uma outra função e um tempo para ser executada.
   setTimeout(function, delay)
   A função de argumento do setTimeout é uma callback, ela vai executar depois de um certo tempo.

---------------------------------------------------------------------------------------------------

Promesas
   É um objeto JavaScript com a promessa de que algo será realizado
   Essa promessa não significa que vai dar certo ou que vai dar errado.

   Uma promessa tem quantro estagios, ou seja poderá ser
      Pending: Estado inicial, assim que o objeto da promessa é iniciado
      Fulfilled: A promessa foi concluída com sucesso
      Rejected: A promessa foi rejeitada, houve um erro
      Settled: Seja com sucesso ou erro, ela foi finalmente concluída

   const promesa = new Promise ((resolve, reject) => {
      return resolve('Pedido aceito!')
      return reject('Pedido negado!')
   })


