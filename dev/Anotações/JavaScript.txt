Historia:

JavaScript = Client x Server (Principalmente para o lado do cliente)

Qual a diferença entre um cliente e um servidor para a internet?:
  Um servidor é um host que está executando um ou mais serviços ou programas que compartilham recursos com os clientes. Um cliente não compartilha qualquer de seus recursos, mas solicita um conteúdo ou função do servidor. Os clientes iniciam sessões de comunicação com os servidores que aguardam requisições de entrada.

Empresa que criou o javascript?:
  O JavaScript foi criado na década de 90 por Brendan Eich a serviço da Netscape.

Java e JavaScript são linguagens de programação diferentes por mais que os nomes sejam iguais, o nome JavaScript só é assim por conta de Marketing. Queriam aproveitar a fama que a linguagem Java estava tendo no momento.

O quê ECMAScript tem a ver com JavaScript?
  ECMAScript é a versão padronizada de JavaScript
  ECMAscript é a linguagem, e javascript é um dialeto, ou seja, a mesma coisa. 
  Cada navegador implementa o javascript de uma maneira diferente e o papel do ecmascript e padronizar essas implementacoes, para que voce nao precise como antigamente escrever um codigo para alguns navegadores e outro codigo para o internet explorer por exemplo.

---------------------------------------------------------------------------------------------------

Variavel:

var - global, todo mundo pode acessar
let - apenas quem esta no mesmo escopo pode acessar
const - imutavel, apos passar um valor não podera muda-lo

---------------------------------------------------------------------------------------------------

Tipos de dados:  typeof - Conferir qual é o Tipo Primitivo de uma Variavel

String  -  Cadeia de caracteres (Texto)
  Aspas duplas
  Aspas simples


Number  -  Números
  Inteiros
  Float
  Not a Number
  Infinity


Boolean  -  Somente 2 valores
  true
  false


undefined  -  indefinido


null  -  nulo
  objeto que não possui nada dentro
  diferente de indefinito


Array  -  Agrupamento de dados
   EX:  const pessoas = ['João', 'Flavia', 'Mateus']
  Acessando
    console.log(pessoas[2])


Object  -  Objeto
  Propriedade / Atributos
  Funcionalidade / Métodos
    EX:  const pessoa = {nome: "João", idade: 20, peso: 50}
  Acessando
    console.log(pessoa.nome)

  JSON
    stringify  -  transforma o objeto tudo para texto  string
    parce  -  tranforma em objeto

---------------------------------------------------------------------------------------------------

Operadores:

Aritméticos
  +  Adição 
  -  Subtração
  *  Multiplicação
  /  Divição
  %  Resto
  **  Potencia


Atribuição
    =
   +=
   -=
   *=
   /=
  **=
   %=


Relacionais
  >    Maior
  <    Menor
  >=   Maior ou igual
  <=   Menor ou igual
  ==   Igual
  !=   Diferente

  Irá ver além dos valores os tipos de elementos
     ===   Estritamente igual
     !==   Estritamente diferente


New
  A expressão new, serve para criar um novo objeto usando as funções construtoras que temos por padrão no JavaScript.


Lógicos   Ordem - !, &&, ||
  !   Negação                "não"  Inverte o valor de  True  para  False  ou vice-versa
  &&   Conjunção             "e"    Considera que todos os valores sejam  True
  ||   Disjunção             "ou"   Considera que qualquer valor seja True


Unarios
  typeof
     Serve para saber o tipo de dado que temos na expressão
  delete
     Deleta alguma propriedade de um objeto, desde que ela exista.


Ternário
  condição ? true : false
   condição então valor 1 se não valor 2


Ordem
  (),   ! ++ --,   * /,   + -,   < <= > >=,   == != === !==,   &&,   ||,   ?:,   = += -= *= %=

---------------------------------------------------------------------------------------------------

Operadores Bit à Bit:

Conjução   &
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 & 12
   Depois que fizer a conversão você faz a regra da Conjução
             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 0 1 0 0 0  = 8


Disjunção   |
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 | 12
   Depois que fizer a conversão você faz a regra da Disjução
             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 1 1 1 0  = 30


Disjunção Esclusiva ^
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 ^ 12
   Depois que fizer a conversão você faz a regra da Disjução Esclusiva
             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 0 1 1 0  = 8


Negação ~
   Fazer potencias de 2 até dar uma resultado mais proximo do número que você estiver fazendo a inversão
      Ex: n° ~12      128 64 32 16  8 4 2 1
                        0  0  0  0  1 1 0 0   =  +12
                        1  1  1  1  0 0 1 1   =  -13
   Apos fazer a converção, inverter todos os numeros, os 0 serão 1 e os 1 serão 0, e somar mais 1
   Um atalho é que quando for inverter um numero de positivo para negativo é só somar mais 1 e trocar o sinal
   E de negativo para positivo tira 1 e troca o sinal


Right Shift >>
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, da direita para a esquerda, você tira a quantidade do 2° numero
     Ex: n°  22 >> 2
                             16 8 4 2 1
                         22 = 1 0 1 1 0
                  resultado = 1 0 1 1 0  menos 2 casas = 1 0 1
                                                                          4 2 1
                                                                          1 0 1  = 4 + 1 = 5


Left Shift <<
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, você aduciona a quantidade do 2° numero
     Ex: n°  22 << 2
                         16 8 4 2 1
                     22 = 1 0 1 1 0
              resultado = 1 0 1 1 0  mais 2 casas = 1 0 1 1 0 0 0
                                                                             64 32 16 8 4 2 1
                                                                              1  0  1 1 0 0 0  = 64 + 16 + 8 = 88

---------------------------------------------------------------------------------------------------

Controle:

if/else -   if (Condição) {
              true
            }else {
              false
            }


Switch/case - swith(parametro da função / variavel) {
                 case 1:
                    return "alguma coisa";
                    break
                 case 2:
                    return "alguma coisa";
                    break
                 case 3:
                    return "alguma coisa";
                    break
                 default:
                    return "alguma coisa"
                    break
              }


try/catch
   tratamento de erro
     try{tenta executa}
     catch{error}
     finally{executa sempre}

---------------------------------------------------------------------------------------------------

Repetição:  Iteração

for  -  Usar quando eu sei a hora de parar
  for (var i = 1; i <= 10; i++) {
    console.log(i)
  }


while  -  Usar quando eu não sei a hora de parar
  while(true) {
    console.log('João')
  }


do while
  do{
    execução do codigo independente se for verdade ou não
  }while(teste logico){
    Ira continuar o codigo, ou não
  }

---------------------------------------------------------------------------------------------------

Funções:  Bloco de codigo que são reutilizáveis para evitar a repetição de codigo

Declarar uma função  -  Função que não retorna nada, função normal
  function nomeFuncao() {}


Funçoes com retorno  -  Função que retorna algo
  function nomeFuncao() {
    return
  }


Funções com parametros  -  Função que recebe uma quantidade especifica de parametros e retorna algo
  function nomeFuncao(n1, n2) {
    return n1 + n2
  }
  console.log(nomeFuncao(2, 5))


Funções com parametros REST  -  Função que recebe uma quantidade não especifica de parametros e retorna algo, posso passar quantos valores eu quiser
  function nomeFuncao(...valores) {
    let tam = valores.length
    let res = 0
    for(let i = 0; i< tam; i++) {
       res += valores[i]
    }
    return res
  }
  console.log(nomeFuncao(2, 5, 10, 3, 6, 9, 28))


Funções Anônimas
   const nome = function() {}


Arrow Function  -  Mesmo caisa que uma função normal
  const nome = () => {}


Funções Aninhadas
   Funções dentro de função


Funções Geradoras
   function* nome() {}

---------------------------------------------------------------------------------------------------

Funções JS

MAP

arry.map((elemento) =>{elemento} )


---------------------------------------------------------------------------------------------------

DOM:

getElementsByTagName("div")


---------------------------------------------------------------------------------------------------

Classes:

São construtores de Objetos. É como se as Classes fossem uma maquina de bombom e o bombom fosse o Objeto em si



















---------------------------------------------------------------------------------------------------

OOP:



---------------------------------------------------------------------------------------------------

Biblioteca:

Math  -  Matematica


Date  -  Data / Hora
let data = new Date()

-------------------------------------------------

localStorage e sessionStorage:   Salvar dados no navegador

localStorage
   Quandos os dados são importantes

   NORMAL
   localStorage.serItem("chave", dado)     salvar
   localStorage.getItem("chave", dado)     resgatar
   localStorage.removeItem("chave", dado)  remover

   OBJETO
   localStorage.setItem("chave", JSON.stringigy(objeto))  salvar de objeto para JSON
   const obetoTOstring = localStorage.getItem("nome")     pegar o JSON
   const objeto = JSON.parse(obetoTOstring)               de JSON para objeto
   console.log(objeto.dado)                               usar o objeto

sessionStorage
   Quandos os dados não são importantes

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

Sincrono X Assincrono:


Sistema Síncrono
   Um sistema síncrono (synchronous) é uma tarefa que é concluída após a outra.
   Por padrão, o JavaScript é um sistema síncrono

Sistema Assíncrono
   Num sistema assíncrono (asynchronous) as tarefas são executadas de maneira independente uma da outra.
   O JavaScript poderá usar o assincronismo ao seu favor

---------------------------------------------------------------------------------------------------

Callback
   Callback (chamar de volta) é uma função que é passada como argumento de outra função e depois de algum tempo ela é chamada de volta.

---------------------------------------------------------------------------------------------------

setTimeout
   setTimeout() é uma função que recebe como argumento uma outra função e um tempo para ser executada.
   setTimeout(function, delay)
   A função de argumento do setTimeout é uma callback, ela vai executar depois de um certo tempo.

---------------------------------------------------------------------------------------------------

Promesas
   É um objeto JavaScript com a promessa de que algo será realizado
   Essa promessa não significa que vai dar certo ou que vai dar errado.

   Uma promessa tem quantro estagios, ou seja poderá ser
      Pending: Estado inicial, assim que o objeto da promessa é iniciado
      Fulfilled: A promessa foi concluída com sucesso
      Rejected: A promessa foi rejeitada, houve um erro
      Settled: Seja com sucesso ou erro, ela foi finalmente concluída

   const promesa = new Promise ((resolve, reject) => {
      return resolve('Pedido aceito!')
      return reject('Pedido negado!')
   })


