Type Alias e Union
  São recursos do TypeScript que permitem definir tipos personalizados para serem utilizados em variáveis, parâmetros de função ou retornos de função.

  Union
    É quando você coloca dois ou mais de um tipo na variáveis, parâmetros de função ou retornos de função

  Alias
    Já o alias cria um novo tipo mais complexo que os tipos primitivos em si, que pode ser um tipo novo ou a junção de varios
    EX:  type nomeTipo = number | string | undefined | ...


Interface
  Outra maneira de criar tipagens como o Alias
  EX: interface nomeInterface {}


Type Alias VS Interface
  O objetivo de ambos serve para definir tipagens no TypeScript. O type alias é mais recomendado por ser mais simples, fácil de lidar com tipos primitivos, por ser mais flexível. Já as interfaces são utilizadas normalmente em criação de libs, para aqueles que gostam da programação orientada a objetos.
  Em geral, as interfaces são usadas para definir a forma de um objeto, enquanto os type aliases são usados para criar novos tipos combinando tipos existentes. Ambos têm seus usos e podem ser usados em conjunto para criar tipos personalizados complexos e expressivos.



Opcional
  Para informamos que uma propriedade é opcional inserimos o sinal de ?

