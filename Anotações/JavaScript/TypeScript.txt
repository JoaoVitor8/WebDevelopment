O que é o TypeScript?
  O TypeScript foi criado pela Microsoft para trazer um superset de tipagens para o JavaScript.
  A diferença entre o JavaScript e TypeScript é a sua tipagem que no JS não é obrigatório, já no TS é obrigatório, mas nem pra todos os casos. Algumas vantagens de utilizar o TS é que a sua adoção pode ocorrer de forma gradual em um projeto JavaScript.


Porquê utilizar TypeScript?
  A maior vantagem de usar o TypeScript além de aumentar a nossa produtividade no dia a dia é ele reconhecer os erros durante o desenvolvimento, diferente do JavaScript que reconhecerá apenas quando o projeto é executado.


Quando usar?
  Projetos grandes: À medida que o tamanho do projeto aumenta, o gerenciamento de tipos pode se tornar mais difícil no JavaScript. O TypeScript oferece recursos avançados de tipagem que ajudam a gerenciar melhor os tipos em projetos grandes, tornando o código mais fácil de manter e reduzindo a possibilidade de erros.
  Projetos em equipe: Quando várias pessoas trabalham em um projeto, pode ser útil ter um sistema de tipagem que ajude a garantir que cada membro da equipe esteja usando os tipos corretos. O TypeScript pode ajudar a reduzir erros e aumentar a consistência do código.
  Projetos complexos: Se o projeto envolve muitas partes móveis ou complexas, é provável que haja muitos tipos diferentes envolvidos. O TypeScript pode ajudar a garantir que esses tipos sejam gerenciados de forma consistente, evitando erros e melhorando a clareza do código.
  Integração com outras bibliotecas: O TypeScript pode ser especialmente útil quando se trabalha com bibliotecas externas que não possuem tipos adequados. O TypeScript pode ser usado para criar definições de tipo para essas bibliotecas, tornando a integração com elas mais fácil e reduzindo a possibilidade de erros.

  Em resumo, o TypeScript é uma boa escolha quando você está trabalhando em projetos grandes, complexos ou em equipe, ou quando está integrando bibliotecas externas. Ele pode ajudar a gerenciar melhor os tipos em seu código, tornando-o mais fácil de manter e reduzindo a possibilidade de erros.


Type == Tipo

---------------------------------------------------------------------------------------------------

Adicionando TypeScript
  Instalando o TypeScript no projeto  -  npm install --typescript --save-dev


  Criar arquivo: tsconfig.json

---------------------------------------------------------------------------------------------------

Tipos primitivos
  number: tipo numérico que pode ser usado para representar números inteiros e de ponto flutuante.
  string: tipo que representa cadeias de caracteres, que podem incluir letras, números e outros caracteres especiais.
  boolean: tipo que representa valores booleanos, ou seja, verdadeiro ou falso.
  any: tipo que pode ser usado para representar qualquer tipo de valor, incluindo valores desconhecidos ou dinâmicos.
  void: tipo que representa a ausência de qualquer tipo de valor, normalmente usado para indicar que uma função não retorna nenhum valor.
  null e undefined: tipos que representam valores nulos ou indefinidos, respectivamente.
  object: tipo que representa qualquer objeto JavaScript, incluindo objetos personalizados, funções e matrizes.
  array[]: tipo que representa matrizes de valores, onde cada elemento da matriz pode ser de qualquer tipo.
  tuple: tipo que representa uma matriz com um número fixo de elementos, onde cada elemento pode ter um tipo diferente.
  enum: tipo que pode ser usado para definir um conjunto de valores nomeados.
  never: tipo que representa um valor que nunca ocorre, normalmente usado para indicar erros ou exceções em tempo de execução.


Como definir o tipo?
  Para definir o tipo de uma variável, parâmetro de função ou retorno de função em TypeScript, utilizamos o sinal de dois pontos : seguido do tipo desejado.


Opcional
  Para informamos que uma propriedade é opcional inserimos o sinal de ?


Inference
  É um recurso do TypeScript que permite ao compilador inferir o tipo de uma variável, parâmetro de função ou retorno de função com base no valor atribuído ou retornado.
  Isso significa que em muitos casos, o TypeScript pode determinar automaticamente o tipo de uma variável sem que seja necessário definir explicitamente.

---------------------------------------------------------------------------------------------------

Classes
  ?????

---------------------------------------------------------------------------------------------------

Type Alias e Union
  São recursos do TypeScript que permitem definir tipos personalizados para serem utilizados em variáveis, parâmetros de função ou retornos de função.


  Union
    É quando você coloca dois ou mais de um tipo na variáveis, parâmetros de função ou retornos de função
    EX:  let nomeVariavel: number | string | undefined | ...

  Alias
    Já o alias cria um novo tipo mais complexo que os tipos primitivos em si, que pode ser um tipo novo ou a junção de varios
    EX:  type nomeTipo = number | string | undefined | ...


Interface
  Outra maneira de criar tipagens como o Alias
  EX: interface nomeInterface {}


Type Alias VS Interface
  O objetivo de ambos serve para definir tipagens no TypeScript. O type alias é mais recomendado por ser mais simples, fácil de lidar com tipos primitivos, por ser mais flexível. Já as interfaces são utilizadas normalmente em criação de libs, para aqueles que gostam da programação orientada a objetos.
  Em geral, as interfaces são usadas para definir a forma de um objeto, enquanto os type aliases são usados para criar novos tipos combinando tipos existentes. Ambos têm seus usos e podem ser usados em conjunto para criar tipos personalizados complexos e expressivos.

---------------------------------------------------------------------------------------------------

Generics
  O generic no TypeScript nos permite reutilizar uma determinada implementação de código, de forma tipada. Para representar um generic, nós declaramos ele dessa forma <J> (podendo ser utilizado qualquer outra letra, existem as convenções que podemos seguir:

  <S> → Representando State
  <T> → Representando Type
  <K> → Representando Key
  <V> → Representando Value
  <E> → Representando Element
  <P> → Representando Propriedades

---------------------------------------------------------------------------------------------------

Type Utilities
  São recursos que permitem manipular e inspecionar tipos. Eles são usados ​​para criar tipos novos e mais complexos a partir de tipos existentes, como tipos opcionais, tipos parciais, tipos exclusivos e tipos intersecção

---------------------------------------------------------------------------------------------------

Decorators
  É uma funcionalidade que permite adicionar comportamentos adicionais a uma classe, método, propriedade ou parâmetro de função. Eles são implementados usando a sintaxe @decorator e podem ser usados ​​para adicionar funcionalidades, como controle de acesso, registro de log e validação de entrada de dados. Decorators são uma forma útil de separar a lógica de negócios da infraestrutura técnica de uma aplicação

  Resumo
    Oque é um Decorators?: É uma função
    Sintaxe: @nomeFunção()
    Porque usar?: Adicionar funcionalidade, Facilitar a leitura do código, Reutilização de código, Evitar a repetição de código, Integração com bibliotecas e frameworks


---------------------------------------------------------------------------------------------------

