Historia:

JavaScript = Client x Server (Principalmente para o lado do cliente)

Qual a diferença entre um cliente e um servidor para a internet?:
  Um servidor é um host que está executando um ou mais serviços ou programas que compartilham recursos com os clientes. Um cliente não compartilha qualquer de seus recursos, mas solicita um conteúdo ou função do servidor. Os clientes iniciam sessões de comunicação com os servidores que aguardam requisições de entrada.

Empresa que criou o javascript?:
  O JavaScript foi criado na década de 90 por Brendan Eich a serviço da Netscape.

Java e JavaScript são linguagens de programação diferentes por mais que os nomes sejam iguais, o nome JavaScript só é assim por conta de Marketing. Queriam aproveitar a fama que a linguagem Java estava tendo no momento.

O quê ECMAScript tem a ver com JavaScript?
  ECMAScript é a versão padronizada de JavaScript
  ECMAscript é a linguagem, e javascript é um dialeto, ou seja, a mesma coisa. 
  Cada navegador implementa o javascript de uma maneira diferente e o papel do ecmascript e padronizar essas implementacoes, para que voce nao precise como antigamente escrever um codigo para alguns navegadores e outro codigo para o internet explorer por exemplo.

---------------------------------------------------------------------------------------------------

Controle:

if/else -   if (Condição) {
              true
            }else {
              false
            }


Switch/case - swith(parametro da função / variavel) {
                 case 1:
                    return "alguma coisa";
                    break
                 case 2:
                    return "alguma coisa";
                    break
                 case 3:
                    return "alguma coisa";
                    break
                 default:
                    return "alguma coisa"
                    break
              }


try/catch
   tratamento de erro
     try{tenta executa}
     catch{error}
     finally{executa sempre}

---------------------------------------------------------------------------------------------------

Repetição:  Iteração

for  -  Usar quando eu sei a hora de parar
  for (var i = 1; i <= 10; i++) {
    console.log(i)
  }


while  -  Usar quando eu não sei a hora de parar
  while(true) {
    console.log('João')
  }


do while
  do{
    execução do codigo independente se for verdade ou não
  }while(teste logico){
    Ira continuar o codigo, ou não
  }

---------------------------------------------------------------------------------------------------

Funções:  Bloco de codigo que são reutilizáveis para evitar a repetição de codigo

Declarar uma função  -  Função que não retorna nada, função normal
  function nomeFuncao() {}


Funçoes com retorno  -  Função que retorna algo
  function nomeFuncao() {
    return
  }


Funções com parametros  -  Função que recebe uma quantidade especifica de parametros e retorna algo
  function nomeFuncao(n1, n2) {
    return n1 + n2
  }
  console.log(nomeFuncao(2, 5))


Funções com parametros REST  -  Função que recebe uma quantidade não especifica de parametros e retorna algo, posso passar quantos valores eu quiser
  function nomeFuncao(...valores) {
    let tam = valores.length
    let res = 0
    for(let i = 0; i< tam; i++) {
       res += valores[i]
    }
    return res
  }
  console.log(nomeFuncao(2, 5, 10, 3, 6, 9, 28))


Funções Anônimas
   const nome = function() {}


Arrow Function  -  Mesmo caisa que uma função normal
  const nome = () => {}


Funções Aninhadas
   Funções dentro de função


Funções Geradoras
   function* nome() {}


...
  ??

---------------------------------------------------------------------------------------------------

Funções JS

MAP

arry.map((elemento) =>{elemento} )


---------------------------------------------------------------------------------------------------

DOM:

getElementsByTagName("div")


---------------------------------------------------------------------------------------------------

Classes:
  São construtores de Objetos. É como se as Classes fossem uma maquina de bombom e o bombom fosse o Objeto em si
  São uma forma de se criar objetos que possuem características e comportamentos semelhantes. Uma classe é basicamente um molde ou modelo que define como um objeto deve ser criado, quais propriedades e métodos ele deve ter, e como eles devem funcionar.
  A partir de uma classe, é possível criar várias instâncias de objetos que compartilham as mesmas características e comportamentos definidos pela classe.

    EX de como criar uma Classe:
      class Pessoa {
        constructor(nome, idade) {
          this.nome = nome;
          this.idade = idade;
        }

        dizerNome() {
          console.log(`Meu nome é ${this.nome}`);
        }

        dizerIdade() {
          console.log(`Eu tenho ${this.idade} anos`);
        }
      }
  

  Para criar um objeto a partir da classe, usamos a palavra-chave  new , seguida do nome da classe e dos parâmetros que o construtor precisa receber:

    EX:
      const pessoa1 = new Pessoa("João", 30);
      const pessoa2 = new Pessoa("Maria", 25);


contrutor(){}
  Sempre irei usa-la caso alguma informação do objeto for obrigatorio

this
  É o objeto da Classe
  Inves de escrever o nome dado que no exemplo acima é Pessoa, eu escrevo  this.nome

------------------------------------------------------------------------------

Importação:
  const nomeVariavel = require('./arquivo')


Exportação:
  module.exports = Oque vc for esportar.

------------------------------------------------------------------------------

Orientação a Protótipo

------------------------------------------------------------------------------

Biblioteca:

Math  -  Matematica


Date  -  Data / Hora
let data = new Date()

-------------------------------------------------

localStorage e sessionStorage:   Salvar dados no navegador

localStorage
   Os dados permanecem disponíveis mesmo após o navegador ser fechado e reaberto

   localStorage.setItem("chave", dado)   armazenar item
   localStorage.getItem("chave")         recuperar item
   localStorage.removeItem("chave")      remover item

sessionStorage
   Os dados são apagados assim que o navegador é fechado.

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

Sincrono X Assincrono:


Sistema Síncrono
   Um sistema síncrono (synchronous) é uma tarefa que é concluída após a outra.
   Por padrão, o JavaScript é um sistema síncrono

Sistema Assíncrono
   Num sistema assíncrono (asynchronous) as tarefas são executadas de maneira independente uma da outra.
   O JavaScript poderá usar o assincronismo ao seu favor

---------------------------------------------------------------------------------------------------

Callback
   Callback (chamar de volta) é uma função que é passada como argumento de outra função e depois de algum tempo ela é chamada de volta.

---------------------------------------------------------------------------------------------------

setTimeout
   setTimeout() é uma função que recebe como argumento uma outra função e um tempo para ser executada.
   setTimeout(function, delay)
   A função de argumento do setTimeout é uma callback, ela vai executar depois de um certo tempo.

---------------------------------------------------------------------------------------------------

Promesas
   É um objeto JavaScript com a promessa de que algo será realizado
   Essa promessa não significa que vai dar certo ou que vai dar errado.

   Uma promessa tem quantro estagios, ou seja poderá ser
      Pending: Estado inicial, assim que o objeto da promessa é iniciado
      Fulfilled: A promessa foi concluída com sucesso
      Rejected: A promessa foi rejeitada, houve um erro
      Settled: Seja com sucesso ou erro, ela foi finalmente concluída

   const promesa = new Promise ((resolve, reject) => {
      return resolve('Pedido aceito!')
      return reject('Pedido negado!')
   })


